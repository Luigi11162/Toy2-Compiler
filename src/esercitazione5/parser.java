
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import esercitazione5.Nodes.*;
import esercitazione5.Nodes.Expr.*;
import esercitazione5.Nodes.Stat.*;
import esercitazione5.Nodes.UtilsClass.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\005\000\002\002\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\002\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\002\000" +
    "\002\041\004\000\002\041\003\000\002\040\004\000\002" +
    "\037\007\000\002\037\007\000\002\037\007\000\002\037" +
    "\007\000\002\015\005\000\002\015\003\000\002\017\005" +
    "\000\002\017\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\036\014\000\002\034\006\000\002\034\002" +
    "\000\002\035\007\000\002\035\002\000\002\021\005\000" +
    "\002\021\003\000\002\005\012\000\002\032\006\000\002" +
    "\032\002\000\002\033\007\000\002\033\002\000\002\031" +
    "\003\000\002\031\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\002\000\002\027\006\000\002\027\004\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\004\000\002\027\004\000\002\006" +
    "\006\000\002\006\005\000\002\030\006\000\002\030\005" +
    "\000\002\022\011\000\002\026\004\000\002\026\002\000" +
    "\002\025\006\000\002\023\004\000\002\023\002\000\002" +
    "\024\007\000\002\011\004\000\002\011\007\000\002\011" +
    "\002\000\002\012\005\000\002\012\003\000\002\014\005" +
    "\000\002\014\006\000\002\014\003\000\002\014\004\000" +
    "\002\013\005\000\002\013\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\004" +
    "\000\002\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\010\004\005\012\011\017\ufffd\001\002\000" +
    "\004\002\313\001\002\000\004\063\202\001\002\000\010" +
    "\004\005\012\011\017\ufffd\001\002\000\044\002\ufff7\004" +
    "\005\011\ufff7\012\ufff7\014\ufff7\017\ufff7\020\ufff7\022\ufff7" +
    "\023\ufff7\025\ufff7\026\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\035\ufff7\063\ufff7\001\002\000\010\004\005\012\011" +
    "\017\ufffd\001\002\000\004\063\237\001\002\000\004\017" +
    "\013\001\002\000\004\063\024\001\002\000\012\002\ufff9" +
    "\004\005\012\011\017\013\001\002\000\012\002\ufff9\004" +
    "\005\012\011\017\013\001\002\000\012\002\ufff9\004\005" +
    "\012\011\017\013\001\002\000\012\002\ufff9\004\005\012" +
    "\011\017\013\001\002\000\004\002\001\001\002\000\004" +
    "\002\ufffa\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\ufffb\001\002\000\004\015\025\001\002\000\010\016\uffdb" +
    "\021\026\063\027\001\002\000\004\063\236\001\002\000" +
    "\004\005\uffd8\001\002\000\004\016\046\001\002\000\004" +
    "\005\032\001\002\000\012\064\036\065\033\066\035\067" +
    "\037\001\002\000\012\005\uffe7\007\uffe7\010\uffe7\016\uffe7" +
    "\001\002\000\006\010\040\016\uffd9\001\002\000\012\005" +
    "\uffe6\007\uffe6\010\uffe6\016\uffe6\001\002\000\012\005\uffe8" +
    "\007\uffe8\010\uffe8\016\uffe8\001\002\000\012\005\uffe5\007" +
    "\uffe5\010\uffe5\016\uffe5\001\002\000\006\021\026\063\027" +
    "\001\002\000\004\016\uffdc\001\002\000\004\005\043\001" +
    "\002\000\012\064\036\065\033\066\035\067\037\001\002" +
    "\000\006\010\040\016\uffd9\001\002\000\004\016\uffda\001" +
    "\002\000\004\005\047\001\002\000\024\004\005\011\065" +
    "\020\uffd4\022\060\023\061\025\050\026\056\033\051\063" +
    "\057\001\002\000\010\007\uffbe\024\152\060\150\001\002" +
    "\000\024\015\073\037\066\052\101\056\067\057\077\060" +
    "\071\061\072\062\075\063\100\001\002\000\004\006\225" +
    "\001\002\000\004\007\224\001\002\000\004\007\223\001" +
    "\002\000\004\007\222\001\002\000\024\015\073\037\066" +
    "\052\101\056\067\057\077\060\071\061\072\062\075\063" +
    "\100\001\002\000\010\006\ufff0\010\166\015\167\001\002" +
    "\000\010\007\uffbe\024\152\060\150\001\002\000\010\007" +
    "\uffbe\024\152\060\150\001\002\000\036\004\005\011\065" +
    "\014\uffd4\020\uffd4\022\060\023\061\025\050\026\056\030" +
    "\uffd4\031\uffd4\032\uffd4\033\051\035\uffd4\063\057\001\002" +
    "\000\004\020\146\001\002\000\036\004\005\011\065\014" +
    "\uffd4\020\uffd4\022\060\023\061\025\050\026\056\030\uffd4" +
    "\031\uffd4\032\uffd4\033\051\035\uffd4\063\057\001\002\000" +
    "\024\015\073\037\066\052\101\056\067\057\077\060\071" +
    "\061\072\062\075\063\100\001\002\000\024\015\073\037" +
    "\066\052\101\056\067\057\077\060\071\061\072\062\075" +
    "\063\100\001\002\000\044\007\uffb4\010\uffb4\016\uffb4\027" +
    "\uffb4\034\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\001\002\000\040\007\uffb6\010\142\016\uffb6\036\106" +
    "\037\103\040\113\041\112\042\107\043\114\044\115\045" +
    "\110\046\111\047\105\050\104\051\116\001\002\000\044" +
    "\007\uffb2\010\uffb2\016\uffb2\027\uffb2\034\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\001\002\000\044\007" +
    "\uffb0\010\uffb0\016\uffb0\027\uffb0\034\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\001\002\000\024\015\073" +
    "\037\066\052\101\056\067\057\077\060\071\061\072\062" +
    "\075\063\100\001\002\000\004\007\137\001\002\000\044" +
    "\007\uffaf\010\uffaf\016\uffaf\027\uffaf\034\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\001\002\000\044\007" +
    "\uffb5\010\uffb5\016\uffb5\027\uffb5\034\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\001\002\000\044\007\uffb3" +
    "\010\uffb3\016\uffb3\027\uffb3\034\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\001\002\000\046\007\uffb1\010" +
    "\uffb1\015\133\016\uffb1\027\uffb1\034\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\001\002\000\024\015\073" +
    "\037\066\052\101\056\067\057\077\060\071\061\072\062" +
    "\075\063\100\001\002\000\044\007\uffa0\010\uffa0\016\uffa0" +
    "\027\uffa0\034\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0" +
    "\051\uffa0\001\002\000\024\015\073\037\066\052\101\056" +
    "\067\057\077\060\071\061\072\062\075\063\100\001\002" +
    "\000\024\015\073\037\066\052\101\056\067\057\077\060" +
    "\071\061\072\062\075\063\100\001\002\000\024\015\073" +
    "\037\066\052\101\056\067\057\077\060\071\061\072\062" +
    "\075\063\100\001\002\000\024\015\073\037\066\052\101" +
    "\056\067\057\077\060\071\061\072\062\075\063\100\001" +
    "\002\000\024\015\073\037\066\052\101\056\067\057\077" +
    "\060\071\061\072\062\075\063\100\001\002\000\024\015" +
    "\073\037\066\052\101\056\067\057\077\060\071\061\072" +
    "\062\075\063\100\001\002\000\024\015\073\037\066\052" +
    "\101\056\067\057\077\060\071\061\072\062\075\063\100" +
    "\001\002\000\024\015\073\037\066\052\101\056\067\057" +
    "\077\060\071\061\072\062\075\063\100\001\002\000\024" +
    "\015\073\037\066\052\101\056\067\057\077\060\071\061" +
    "\072\062\075\063\100\001\002\000\024\015\073\037\066" +
    "\052\101\056\067\057\077\060\071\061\072\062\075\063" +
    "\100\001\002\000\024\015\073\037\066\052\101\056\067" +
    "\057\077\060\071\061\072\062\075\063\100\001\002\000" +
    "\024\015\073\037\066\052\101\056\067\057\077\060\071" +
    "\061\072\062\075\063\100\001\002\000\044\007\uffa9\010" +
    "\uffa9\016\uffa9\027\uffa9\034\uffa9\036\106\037\103\040\113" +
    "\041\112\042\107\043\114\044\115\045\110\046\111\047" +
    "\105\050\104\051\uffa9\001\002\000\044\007\uffa6\010\uffa6" +
    "\016\uffa6\027\uffa6\034\uffa6\036\106\037\103\040\113\041" +
    "\112\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\001\002\000\044\007\uffa3\010\uffa3\016" +
    "\uffa3\027\uffa3\034\uffa3\036\106\037\103\040\113\041\112" +
    "\042\uffa3\043\uffa3\044\115\045\110\046\111\047\105\050" +
    "\uffa3\051\uffa3\001\002\000\044\007\uffac\010\uffac\016\uffac" +
    "\027\uffac\034\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\001\002\000\044\007\uffab\010\uffab\016\uffab\027" +
    "\uffab\034\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\001\002\000\044\007\uffa8\010\uffa8\016\uffa8\027\uffa8" +
    "\034\uffa8\036\106\037\103\040\113\041\112\042\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8" +
    "\001\002\000\044\007\uffa5\010\uffa5\016\uffa5\027\uffa5\034" +
    "\uffa5\036\106\037\103\040\113\041\112\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\001" +
    "\002\000\044\007\uffa4\010\uffa4\016\uffa4\027\uffa4\034\uffa4" +
    "\036\106\037\103\040\113\041\112\042\uffa4\043\uffa4\044" +
    "\115\045\110\046\111\047\105\050\uffa4\051\uffa4\001\002" +
    "\000\044\007\uffae\010\uffae\016\uffae\027\uffae\034\uffae\036" +
    "\uffae\037\uffae\040\113\041\112\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\001\002\000" +
    "\044\007\uffa7\010\uffa7\016\uffa7\027\uffa7\034\uffa7\036\106" +
    "\037\103\040\113\041\112\042\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\001\002\000\044" +
    "\007\uffaa\010\uffaa\016\uffaa\027\uffaa\034\uffaa\036\106\037" +
    "\103\040\113\041\112\042\107\043\114\044\115\045\110" +
    "\046\111\047\105\050\uffaa\051\uffaa\001\002\000\044\007" +
    "\uffad\010\uffad\016\uffad\027\uffad\034\uffad\036\uffad\037\uffad" +
    "\040\113\041\112\042\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\050\uffad\051\uffad\001\002\000\026\015\073" +
    "\016\135\037\066\052\101\056\067\057\077\060\071\061" +
    "\072\062\075\063\100\001\002\000\004\016\136\001\002" +
    "\000\044\007\uffca\010\uffca\016\uffca\027\uffca\034\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\001\002\000" +
    "\044\007\uffcb\010\uffcb\016\uffcb\027\uffcb\034\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002\000\036" +
    "\004\uffd1\011\uffd1\014\uffd1\020\uffd1\022\uffd1\023\uffd1\025" +
    "\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1" +
    "\063\uffd1\001\002\000\034\016\141\036\106\037\103\040" +
    "\113\041\112\042\107\043\114\044\115\045\110\046\111" +
    "\047\105\050\104\051\116\001\002\000\044\007\uffa2\010" +
    "\uffa2\016\uffa2\027\uffa2\034\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\001\002\000\024\015\073\037\066" +
    "\052\101\056\067\057\077\060\071\061\072\062\075\063" +
    "\100\001\002\000\006\007\uffb7\016\uffb7\001\002\000\044" +
    "\007\uffa1\010\uffa1\016\uffa1\027\uffa1\034\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\051\uffa1\001\002\000\016\014" +
    "\uffd6\020\uffd6\030\uffd6\031\uffd6\032\uffd6\035\uffd6\001\002" +
    "\000\012\002\uffdd\004\uffdd\012\uffdd\017\uffdd\001\002\000" +
    "\016\014\uffd5\020\uffd5\030\uffd5\031\uffd5\032\uffd5\035\uffd5" +
    "\001\002\000\012\007\uffbc\024\uffbc\036\uffbc\060\uffbc\001" +
    "\002\000\012\007\uffbe\024\152\036\161\060\150\001\002" +
    "\000\004\015\155\001\002\000\004\007\154\001\002\000" +
    "\036\004\uffcf\011\uffcf\014\uffcf\020\uffcf\022\uffcf\023\uffcf" +
    "\025\uffcf\026\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035" +
    "\uffcf\063\uffcf\001\002\000\024\015\073\037\066\052\101" +
    "\056\067\057\077\060\071\061\072\062\075\063\100\001" +
    "\002\000\034\016\157\036\106\037\103\040\113\041\112" +
    "\042\107\043\114\044\115\045\110\046\111\047\105\050" +
    "\104\051\116\001\002\000\010\007\uffbe\024\152\060\150" +
    "\001\002\000\004\007\uffbf\001\002\000\004\060\150\001" +
    "\002\000\004\007\uffc0\001\002\000\012\007\uffbd\024\uffbd" +
    "\036\uffbd\060\uffbd\001\002\000\004\007\165\001\002\000" +
    "\036\004\uffd0\011\uffd0\014\uffd0\020\uffd0\022\uffd0\023\uffd0" +
    "\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035" +
    "\uffd0\063\uffd0\001\002\000\004\063\202\001\002\000\030" +
    "\015\073\016\173\037\066\052\101\054\172\056\067\057" +
    "\077\060\071\061\072\062\075\063\100\001\002\000\004" +
    "\016\201\001\002\000\036\010\177\016\uffb9\036\106\037" +
    "\103\040\113\041\112\042\107\043\114\044\115\045\110" +
    "\046\111\047\105\050\104\051\116\001\002\000\004\063" +
    "\174\001\002\000\004\007\uffc8\001\002\000\006\010\175" +
    "\016\uffb8\001\002\000\026\015\073\037\066\052\101\054" +
    "\172\056\067\057\077\060\071\061\072\062\075\063\100" +
    "\001\002\000\004\016\uffba\001\002\000\026\015\073\037" +
    "\066\052\101\054\172\056\067\057\077\060\071\061\072" +
    "\062\075\063\100\001\002\000\004\016\uffbb\001\002\000" +
    "\004\007\uffc9\001\002\000\010\005\ufff0\006\ufff0\010\166" +
    "\001\002\000\006\005\ufff1\006\ufff1\001\002\000\034\027" +
    "\205\036\106\037\103\040\113\041\112\042\107\043\114" +
    "\044\115\045\110\046\111\047\105\050\104\051\116\001" +
    "\002\000\030\004\005\011\065\022\060\023\061\025\050" +
    "\026\056\030\uffd4\031\uffd4\032\uffd4\033\051\063\057\001" +
    "\002\000\010\030\uffc5\031\uffc5\032\210\001\002\000\006" +
    "\030\216\031\uffc2\001\002\000\024\015\073\037\066\052" +
    "\101\056\067\057\077\060\071\061\072\062\075\063\100" +
    "\001\002\000\010\030\uffc5\031\uffc5\032\210\001\002\000" +
    "\006\030\uffc6\031\uffc6\001\002\000\034\027\214\036\106" +
    "\037\103\040\113\041\112\042\107\043\114\044\115\045" +
    "\110\046\111\047\105\050\104\051\116\001\002\000\030" +
    "\004\005\011\065\022\060\023\061\025\050\026\056\030" +
    "\uffd4\031\uffd4\032\uffd4\033\051\063\057\001\002\000\010" +
    "\030\uffc4\031\uffc4\032\uffc4\001\002\000\024\004\005\011" +
    "\065\022\060\023\061\025\050\026\056\031\uffd4\033\051" +
    "\063\057\001\002\000\004\031\220\001\002\000\004\007" +
    "\uffc7\001\002\000\004\031\uffc3\001\002\000\036\004\uffcd" +
    "\011\uffcd\014\uffcd\020\uffcd\022\uffcd\023\uffcd\025\uffcd\026" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\063\uffcd" +
    "\001\002\000\036\004\uffd2\011\uffd2\014\uffd2\020\uffd2\022" +
    "\uffd2\023\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\035\uffd2\063\uffd2\001\002\000\036\004\uffcc\011" +
    "\uffcc\014\uffcc\020\uffcc\022\uffcc\023\uffcc\025\uffcc\026\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\063\uffcc\001" +
    "\002\000\024\015\073\037\066\052\101\056\067\057\077" +
    "\060\071\061\072\062\075\063\100\001\002\000\004\007" +
    "\227\001\002\000\036\004\uffd3\011\uffd3\014\uffd3\020\uffd3" +
    "\022\uffd3\023\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\035\uffd3\063\uffd3\001\002\000\034\034\231" +
    "\036\106\037\103\040\113\041\112\042\107\043\114\044" +
    "\115\045\110\046\111\047\105\050\104\051\116\001\002" +
    "\000\024\004\005\011\065\022\060\023\061\025\050\026" +
    "\056\033\051\035\uffd4\063\057\001\002\000\004\035\233" +
    "\001\002\000\004\007\uffc1\001\002\000\004\007\235\001" +
    "\002\000\036\004\uffce\011\uffce\014\uffce\020\uffce\022\uffce" +
    "\023\uffce\025\uffce\026\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\035\uffce\063\uffce\001\002\000\004\005\uffd7\001\002" +
    "\000\004\015\240\001\002\000\006\016\uffe2\063\241\001" +
    "\002\000\004\005\254\001\002\000\004\016\243\001\002" +
    "\000\004\013\244\001\002\000\012\064\036\065\033\066" +
    "\035\067\037\001\002\000\006\005\uffde\010\252\001\002" +
    "\000\004\005\247\001\002\000\024\004\005\011\065\014" +
    "\uffd4\022\060\023\061\025\050\026\056\033\051\063\057" +
    "\001\002\000\004\014\251\001\002\000\012\002\uffe4\004" +
    "\uffe4\012\uffe4\017\uffe4\001\002\000\012\064\036\065\033" +
    "\066\035\067\037\001\002\000\004\005\uffdf\001\002\000" +
    "\012\064\036\065\033\066\035\067\037\001\002\000\006" +
    "\010\256\016\uffe0\001\002\000\004\063\260\001\002\000" +
    "\004\016\uffe3\001\002\000\004\005\261\001\002\000\012" +
    "\064\036\065\033\066\035\067\037\001\002\000\006\010" +
    "\256\016\uffe0\001\002\000\004\016\uffe1\001\002\000\004" +
    "\017\uffff\001\002\000\044\002\ufff8\004\ufff8\011\ufff8\012" +
    "\ufff8\014\ufff8\017\ufff8\020\ufff8\022\ufff8\023\ufff8\025\ufff8" +
    "\026\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\035\ufff8\063" +
    "\ufff8\001\002\000\004\017\ufffe\001\002\000\006\005\271" +
    "\006\272\001\002\000\044\002\ufff6\004\ufff6\011\ufff6\012" +
    "\ufff6\014\ufff6\017\ufff6\020\ufff6\022\ufff6\023\ufff6\025\ufff6" +
    "\026\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\035\ufff6\063" +
    "\ufff6\001\002\000\012\064\036\065\033\066\035\067\037" +
    "\001\002\000\014\056\301\057\274\060\273\061\276\062" +
    "\277\001\002\000\006\007\uffeb\010\uffeb\001\002\000\006" +
    "\007\uffec\010\uffec\001\002\000\004\007\304\001\002\000" +
    "\006\007\uffea\010\uffea\001\002\000\006\007\uffe9\010\uffe9" +
    "\001\002\000\006\007\uffee\010\302\001\002\000\006\007" +
    "\uffed\010\uffed\001\002\000\014\056\301\057\274\060\273" +
    "\061\276\062\277\001\002\000\004\007\uffef\001\002\000" +
    "\006\053\306\063\202\001\002\000\044\002\ufff4\004\ufff4" +
    "\011\ufff4\012\ufff4\014\ufff4\017\ufff4\020\ufff4\022\ufff4\023" +
    "\ufff4\025\ufff4\026\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\035\ufff4\063\ufff4\001\002\000\044\002\ufff2\004\ufff2\011" +
    "\ufff2\012\ufff2\014\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2" +
    "\025\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\035" +
    "\ufff2\063\ufff2\001\002\000\004\007\310\001\002\000\006" +
    "\053\312\063\202\001\002\000\044\002\ufff5\004\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5" +
    "\025\ufff5\026\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\035" +
    "\ufff5\063\ufff5\001\002\000\044\002\ufff3\004\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3\025" +
    "\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\035\ufff3" +
    "\063\ufff3\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\014\002\003\004\011\036\005\040\006\041" +
    "\007\001\001\000\002\001\001\000\006\015\266\037\267" +
    "\001\001\000\012\004\265\036\005\040\006\041\007\001" +
    "\001\000\006\040\006\041\264\001\001\000\012\004\263" +
    "\036\005\040\006\041\007\001\001\000\002\001\001\000" +
    "\004\005\013\001\001\000\002\001\001\000\014\003\017" +
    "\005\016\036\014\040\006\041\015\001\001\000\014\003" +
    "\022\005\016\036\014\040\006\041\015\001\001\000\014" +
    "\003\021\005\016\036\014\040\006\041\015\001\001\000" +
    "\014\003\020\005\016\036\014\040\006\041\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\030\032\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\033\001\001\000\002" +
    "\001\001\000\004\033\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\043\001" +
    "\001\000\004\033\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\062\015\051\022\054\024\052\027" +
    "\061\030\053\040\006\041\063\001\001\000\006\011\233" +
    "\012\150\001\001\000\006\006\075\010\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\075\010\203\001\001\000\002\001" +
    "\001\000\006\011\163\012\150\001\001\000\006\011\152" +
    "\012\150\001\001\000\022\007\146\015\051\022\054\024" +
    "\052\027\061\030\053\040\006\041\063\001\001\000\002" +
    "\001\001\000\022\007\144\015\051\022\054\024\052\027" +
    "\061\030\053\040\006\041\063\001\001\000\010\006\075" +
    "\010\067\013\073\001\001\000\006\006\075\010\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\075\010\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\075\010\101\001" +
    "\001\000\002\001\001\000\006\006\075\010\131\001\001" +
    "\000\006\006\075\010\130\001\001\000\006\006\075\010" +
    "\127\001\001\000\006\006\075\010\126\001\001\000\006" +
    "\006\075\010\125\001\001\000\006\006\075\010\124\001" +
    "\001\000\006\006\075\010\123\001\001\000\006\006\075" +
    "\010\122\001\001\000\006\006\075\010\121\001\001\000" +
    "\006\006\075\010\120\001\001\000\006\006\075\010\117" +
    "\001\001\000\006\006\075\010\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\075\010\067\013" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\075\010\067\013\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\161" +
    "\012\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\075\010\155\001\001\000\002" +
    "\001\001\000\006\011\157\012\150\001\001\000\002\001" +
    "\001\000\004\012\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\202\001\001\000\010\006\075\010\170\014\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\075\010\170" +
    "\014\175\001\001\000\002\001\001\000\010\006\075\010" +
    "\170\014\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\205\015\051\022\054\024\052\027\061\030\053" +
    "\040\006\041\063\001\001\000\006\025\210\026\206\001" +
    "\001\000\004\023\216\001\001\000\006\006\075\010\212" +
    "\001\001\000\006\025\210\026\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\214\015\051\022\054" +
    "\024\052\027\061\030\053\040\006\041\063\001\001\000" +
    "\002\001\001\000\022\007\220\015\051\022\054\024\052" +
    "\027\061\030\053\040\006\041\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\075\010" +
    "\067\013\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\231\015\051\022\054\024" +
    "\052\027\061\030\053\040\006\041\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\244\021\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\247\015\051\022\054\024" +
    "\052\027\061\030\053\040\006\041\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\244\021\252\001" +
    "\001\000\002\001\001\000\004\020\254\001\001\000\004" +
    "\035\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\261\001\001\000\004\035\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\306\001\001\000\006\016\277\017\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\277\017\302\001\001\000\002" +
    "\001\001\000\006\015\266\037\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\266" +
    "\037\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= IterNoProcedure Procedure Iter 
            {
              ProgramOp RESULT =null;
		int program1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int program1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProgramOp program1 = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcOp procedure = (ProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int program2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int program2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProgramOp program2 = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<VarDeclOp> varDeclList = new ArrayList<>();
                                                                        varDeclList.addAll(program1.getVarDeclOpList());
                                                                        varDeclList.addAll(program2.getVarDeclOpList());
                                                                        ArrayList<ProcOp> procList = new ArrayList<ProcOp>();
                                                                        procList.add(procedure);
                                                                        procList.addAll(program2.getProcOpList());
                                                                        ArrayList<FunOp> funList = program1.getFunOpList();
                                                                        funList.addAll(program2.getFunOpList());
                                                                        RESULT = new ProgramOp(varDeclList, procList, funList);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IterNoProcedure ::= VarDecls IterNoProcedure 
            {
              ProgramOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProgramOp program = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		varDeclList.addAll(program.getVarDeclOpList());
                                                                program.setVarDeclOpList(varDeclList);
                                                                RESULT = program;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterNoProcedure",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IterNoProcedure ::= Function IterNoProcedure 
            {
              ProgramOp RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunOp function = (FunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProgramOp program = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<FunOp> funList = new ArrayList<>();
                                                   funList.add(function);
                                                   funList.addAll(program.getFunOpList());
                                                   program.setFunOpList(funList);
                                                   RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterNoProcedure",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IterNoProcedure ::= 
            {
              ProgramOp RESULT =null;
		 RESULT = new ProgramOp(new ArrayList<VarDeclOp>(), new ArrayList<ProcOp>(), new ArrayList<FunOp>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterNoProcedure",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter ::= VarDecls Iter 
            {
              ProgramOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProgramOp program = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varDeclList.addAll(program.getVarDeclOpList());
                                           program.setVarDeclOpList(varDeclList);
                                           RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Iter ::= Function Iter 
            {
              ProgramOp RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunOp function = (FunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProgramOp program = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<FunOp> funList = new ArrayList<>();
                                       funList.add(function);
                                       funList.addAll(program.getFunOpList());
                                       program.setFunOpList(funList);
                                       RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Iter ::= Procedure Iter 
            {
              ProgramOp RESULT =null;
		int procedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcOp procedure = (ProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProgramOp program = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ProcOp> procList = new ArrayList<>();
                                  procList.add(procedure);
                                  procList.addAll(program.getProcOpList());
                                  program.setProcOpList(procList);
                                  RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Iter ::= 
            {
              ProgramOp RESULT =null;
		 RESULT = new ProgramOp(new ArrayList<VarDeclOp>(), new ArrayList<ProcOp>(), new ArrayList<FunOp>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecls ::= VarDecl VarDecls 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varDeclList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclList1 = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> varDeclList2 = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<VarDeclOp>();
                                                     RESULT.addAll(varDeclList1);
                                                     RESULT.addAll(varDeclList2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecls ::= VarDecl 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<VarDeclOp>();
                        RESULT.addAll(varDeclList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= VAR Decls 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> decl = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decls ::= Ids COLON Type SEMI Decls 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ID> idList = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> declList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<VarDeclOp>();
                                                        RESULT.add(new VarDeclOp(idList, type));
                                                        RESULT.addAll(declList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ID> idList = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Const> constList = (ArrayList<Const>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> declList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<VarDeclOp>();
                                                                 RESULT.add(new VarDeclOp(idList, constList));
                                                                 RESULT.addAll(declList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ID> idList = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayList<VarDeclOp>();
	                                            RESULT.add(new VarDeclOp(idList, type)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ID> idList = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Const> constList = (ArrayList<Const>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayList<VarDeclOp>();
                                                        RESULT.add(new VarDeclOp(idList, constList)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Ids ::= ID COMMA Ids 
            {
              ArrayList<ID> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ID> idList = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new ArrayList<ID>();
                         RESULT.add(new ID(value));
                         RESULT.addAll(idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Ids ::= ID 
            {
              ArrayList<ID> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ID>();
             RESULT.add(new ID(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Consts ::= Const COMMA Consts 
            {
              ArrayList<Const> RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Const const1 = (Const)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Const> constList = (ArrayList<Const>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new ArrayList<Const>();
                                                RESULT.add(const1);
                                                RESULT.addAll(constList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Consts ::= Const 
            {
              ArrayList<Const> RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Const const1 = (Const)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Const>();
                    RESULT.add(const1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  Const("RealConst", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= INTEGER_CONST 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("IntegerConst", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= STRING_CONST 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("StringConst", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= TRUE 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("TrueConst", "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= FALSE 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("FalseConst", "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= REAL 
            {
              Type RESULT =null;
		 RESULT = new Type("Real");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = new Type("Integer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new Type("String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new Type("Boolean");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              FunOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int funcParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int funcParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<ProcFunParamOp> funcParamList = (ArrayList<ProcFunParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int typeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Type> typeList = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunOp(new ID(value), funcParamList, typeList, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FuncParams ::= ID COLON Type OtherFuncParams 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcFunParamOp> funcParamList = (ArrayList<ProcFunParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  ArrayList<ProcFunParamOp>();
                                                                         RESULT.add(new ProcFunParamOp(new Mode("in"), new ID(value), type));
                                                                         RESULT.addAll(funcParamList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FuncParams ::= 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		 RESULT = new ArrayList<ProcFunParamOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OtherFuncParams ::= COMMA ID COLON Type OtherFuncParams 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcFunParamOp> funcParamList = (ArrayList<ProcFunParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  ArrayList<ProcFunParamOp>();
                                                                                    RESULT.add(new ProcFunParamOp(new Mode("in"), new ID(value), type));
                                                                                    RESULT.addAll(funcParamList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OtherFuncParams ::= 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		 RESULT = new ArrayList<ProcFunParamOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Types ::= Type COMMA Types 
            {
              ArrayList<Type> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Type> typeList = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Type>();
                                            RESULT.add(type);
                                            RESULT.addAll(typeList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Types ::= Type 
            {
              ArrayList<Type> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Type>();
                    RESULT.add(type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              ProcOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int procParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int procParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ProcFunParamOp> procParamList = (ArrayList<ProcFunParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcOp(new ID(value), procParamList, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ProcParams ::= ProcParamId COLON Type OtherProcParams 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		int procParamIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int procParamIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PairModeId procParamId = (PairModeId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procParamIdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procParamIdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcFunParamOp> procParamIdList = (ArrayList<ProcFunParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  ArrayList<ProcFunParamOp>();
                                                                                          RESULT.add(new ProcFunParamOp(procParamId.getMode(), procParamId.getId(), type));
                                                                                          RESULT.addAll(procParamIdList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ProcParams ::= 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		 RESULT = new ArrayList<ProcFunParamOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OtherProcParams ::= COMMA ProcParamId COLON Type OtherProcParams 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		int procParamIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int procParamIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PairModeId procParamId = (PairModeId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procParamIdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procParamIdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcFunParamOp> procParamIdList = (ArrayList<ProcFunParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  ArrayList<ProcFunParamOp>();
                                                                                                    RESULT.add(new ProcFunParamOp(procParamId.getMode(), procParamId.getId(), type));
                                                                                                    RESULT.addAll(procParamIdList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OtherProcParams ::= 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		 RESULT = new ArrayList<ProcFunParamOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ProcParamId ::= ID 
            {
              PairModeId RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PairModeId(new Mode("inout"), new ID(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ProcParamId ::= OUT ID 
            {
              PairModeId RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PairModeId(new Mode("out"), new ID(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= VarDecls Body 
            {
              BodyOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<VarDeclOp> varDeclListNew =new ArrayList<>();
                                            varDeclListNew.addAll(varDeclList);
                                            varDeclListNew.addAll(body.getVarDeclOpList());
                                           RESULT = new BodyOp(varDeclListNew, body.getStatList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Body ::= Stat Body 
            {
              BodyOp RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Stat> statList = new ArrayList<>();
                            statList.add(stat);
                            statList.addAll(body.getStatList());
                            RESULT = new BodyOp(body.getVarDeclOpList(),statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Body ::= 
            {
              BodyOp RESULT =null;
		 RESULT = new BodyOp(new ArrayList<VarDeclOp>(), new ArrayList<Stat>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              Stat RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<ID> idList = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignOp(idList, exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= ProcCall SEMI 
            {
              Stat RESULT =null;
		int procCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcCallOp procCall = (ProcCallOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = procCall; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN Exprs SEMI 
            {
              Stat RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnOp(exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= WRITE IOArgs SEMI 
            {
              Stat RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteOp(new Mode("write"), exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= WRITERETURN IOArgs SEMI 
            {
              Stat RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteOp(new Mode("writeReturn"), exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= READ IOArgs SEMI 
            {
              Stat RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadOp(exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stat ::= IfStat SEMI 
            {
              Stat RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStatOp ifStat = (IfStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ifStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stat ::= WhileStat SEMI 
            {
              Stat RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileOp whileStat = (WhileOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = whileStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FunCall ::= ID LPAR Exprs RPAR 
            {
              CallFunOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallFunOp(new ID(value), exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FunCall ::= ID LPAR RPAR 
            {
              CallFunOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallFunOp(new ID(value), new ArrayList<Expr>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              ProcCallOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcCallOp(new ID(value), exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ProcCall ::= ID LPAR RPAR 
            {
              ProcCallOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcCallOp(new ID(value), new ArrayList<Expr>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              IfStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BodyOp body1 = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elifListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ElifOp> elifList = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body2 = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStatOp(expr, body1, elifList, body2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Elifs ::= Elif Elifs 
            {
              ArrayList<ElifOp> RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElifOp elif = (ElifOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elifListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ElifOp> elifList = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ElifOp>();
                                      RESULT.add(elif);
                                      RESULT.addAll(elifList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Elifs ::= 
            {
              ArrayList<ElifOp> RESULT =null;
		 RESULT = new ArrayList<ElifOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Elif ::= ELIF Expr THEN Body 
            {
              ElifOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElifOp(expr, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = body; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Else ::= 
            {
              BodyOp RESULT =null;
		 RESULT = new BodyOp(new ArrayList<VarDeclOp>(), new ArrayList<Stat>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              WhileOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileOp(expr, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IOArgs ::= OtherIOArgs IOArgs 
            {
              ArrayList<Expr> RESULT =null;
		int exprList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList1 = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList2 = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Expr>();
                                                    RESULT.addAll(exprList1);
                                                    RESULT.addAll(exprList2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IOArgs ::= DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Expr>();
                                                          RESULT.add(expr);
                                                          RESULT.addAll(exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IOArgs ::= 
            {
              ArrayList<Expr> RESULT =null;
		 RESULT = new ArrayList<Expr>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OtherIOArgs ::= OtherIOArgs PLUS OtherIOArgs 
            {
              ArrayList<Expr> RESULT =null;
		int exprList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> exprList1 = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList2 = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Expr>();
                                                                 RESULT.addAll(exprList1);
                                                                 RESULT.addAll(exprList2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherIOArgs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OtherIOArgs ::= STRING_CONST 
            {
              ArrayList<Expr> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                                RESULT.add(new Const("StringConst", value));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherIOArgs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                                                    RESULT.add(expr);
                                                    RESULT.addAll(exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              ArrayList<Expr> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                                              RESULT.add(new ID(value));
                                                RESULT.addAll(exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ProcExprs ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                   RESULT.add(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ProcExprs ::= REF ID 
            {
              ArrayList<Expr> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                      RESULT.add(new ID(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                                            RESULT.add(expr);
                                            RESULT.addAll(exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exprs ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                    RESULT.add(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFunOp funCall = (CallFunOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funCall; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("RealConst", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("IntegerConst", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("StringConst", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= ID 
            {
              Expr RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new Const("TrueConst", "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new Const("FalseConst", "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("AddOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("DiffOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("MulOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("DivOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("AndOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("OrOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("GtOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("GeOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("LtOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("LeOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("EqOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("NeOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr("Expr"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UOp("UMinusOP", expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UOp("NotOp", expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
