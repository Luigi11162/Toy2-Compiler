
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import esercitazione5.Nodes.*;
import esercitazione5.Nodes.Expr.*;
import esercitazione5.Nodes.Stat.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\005\000\002\002\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\002\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\002\000" +
    "\002\041\004\000\002\041\003\000\002\040\004\000\002" +
    "\037\007\000\002\037\007\000\002\037\007\000\002\037" +
    "\007\000\002\015\005\000\002\015\003\000\002\017\005" +
    "\000\002\017\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\036\014\000\002\034\006\000\002\034\002" +
    "\000\002\035\007\000\002\035\002\000\002\021\005\000" +
    "\002\021\003\000\002\005\012\000\002\032\006\000\002" +
    "\032\002\000\002\033\007\000\002\033\002\000\002\031" +
    "\003\000\002\031\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\002\000\002\027\006\000\002\027\004\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\004\000\002\027\004\000\002\027" +
    "\004\000\002\042\013\000\002\043\013\000\002\043\002" +
    "\000\002\044\004\000\002\044\002\000\002\006\006\000" +
    "\002\006\005\000\002\030\006\000\002\030\005\000\002" +
    "\022\011\000\002\026\004\000\002\026\002\000\002\025" +
    "\006\000\002\023\004\000\002\023\002\000\002\024\007" +
    "\000\002\011\004\000\002\011\007\000\002\011\002\000" +
    "\002\012\005\000\002\012\003\000\002\014\005\000\002" +
    "\014\006\000\002\014\003\000\002\014\004\000\002\013" +
    "\005\000\002\013\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\004\000\002" +
    "\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\010\004\005\012\011\017\ufffd\001\002\000" +
    "\004\002\341\001\002\000\004\073\230\001\002\000\010" +
    "\004\005\012\011\017\ufffd\001\002\000\050\002\ufff7\004" +
    "\005\007\ufff7\011\ufff7\012\ufff7\014\ufff7\017\ufff7\020\ufff7" +
    "\022\ufff7\023\ufff7\025\ufff7\026\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\033\ufff7\035\ufff7\063\ufff7\073\ufff7\001\002\000\010" +
    "\004\005\012\011\017\ufffd\001\002\000\004\073\265\001" +
    "\002\000\004\017\013\001\002\000\004\073\024\001\002" +
    "\000\012\002\ufff9\004\005\012\011\017\013\001\002\000" +
    "\012\002\ufff9\004\005\012\011\017\013\001\002\000\012" +
    "\002\ufff9\004\005\012\011\017\013\001\002\000\012\002" +
    "\ufff9\004\005\012\011\017\013\001\002\000\004\002\001" +
    "\001\002\000\004\002\ufffa\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\ufffb\001\002\000\004\015\025\001\002" +
    "\000\010\016\uffdb\021\026\073\027\001\002\000\004\073" +
    "\264\001\002\000\004\005\uffd8\001\002\000\004\016\046" +
    "\001\002\000\004\005\032\001\002\000\012\074\036\075" +
    "\033\076\035\077\037\001\002\000\012\005\uffe7\007\uffe7" +
    "\010\uffe7\016\uffe7\001\002\000\006\010\040\016\uffd9\001" +
    "\002\000\012\005\uffe6\007\uffe6\010\uffe6\016\uffe6\001\002" +
    "\000\012\005\uffe8\007\uffe8\010\uffe8\016\uffe8\001\002\000" +
    "\012\005\uffe5\007\uffe5\010\uffe5\016\uffe5\001\002\000\006" +
    "\021\026\073\027\001\002\000\004\016\uffdc\001\002\000" +
    "\004\005\043\001\002\000\012\074\036\075\033\076\035" +
    "\077\037\001\002\000\006\010\040\016\uffd9\001\002\000" +
    "\004\016\uffda\001\002\000\004\005\047\001\002\000\026" +
    "\004\005\011\053\020\uffd4\022\056\023\066\025\050\026" +
    "\054\033\052\063\063\073\057\001\002\000\010\007\uffb8" +
    "\024\152\070\150\001\002\000\040\004\005\011\053\014" +
    "\uffd4\020\uffd4\022\056\023\066\025\050\026\054\030\uffd4" +
    "\031\uffd4\032\uffd4\033\052\035\uffd4\063\063\073\057\001" +
    "\002\000\024\015\076\037\071\052\104\066\072\067\101" +
    "\070\075\071\074\072\100\073\103\001\002\000\024\015" +
    "\076\037\071\052\104\066\072\067\101\070\075\071\074" +
    "\072\100\073\103\001\002\000\024\015\076\037\071\052" +
    "\104\066\072\067\101\070\075\071\074\072\100\073\103" +
    "\001\002\000\004\007\234\001\002\000\010\007\uffb8\024" +
    "\152\070\150\001\002\000\010\006\ufff0\010\214\015\215" +
    "\001\002\000\004\007\213\001\002\000\004\007\212\001" +
    "\002\000\004\020\211\001\002\000\004\004\005\001\002" +
    "\000\040\004\005\011\053\014\uffd4\020\uffd4\022\056\023" +
    "\066\025\050\026\054\030\uffd4\031\uffd4\032\uffd4\033\052" +
    "\035\uffd4\063\063\073\057\001\002\000\004\007\164\001" +
    "\002\000\010\007\uffb8\024\152\070\150\001\002\000\004" +
    "\006\070\001\002\000\024\015\076\037\071\052\104\066" +
    "\072\067\101\070\075\071\074\072\100\073\103\001\002" +
    "\000\024\015\076\037\071\052\104\066\072\067\101\070" +
    "\075\071\074\072\100\073\103\001\002\000\044\007\uffae" +
    "\010\uffae\016\uffae\027\uffae\034\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\001\002\000\040\007\uffb0\010" +
    "\145\016\uffb0\036\111\037\106\040\116\041\114\042\112" +
    "\043\117\044\120\045\113\046\115\047\110\050\107\051" +
    "\121\001\002\000\044\007\uffaa\010\uffaa\016\uffaa\027\uffaa" +
    "\034\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\001\002\000\044\007\uffac\010\uffac\016\uffac\027\uffac\034" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\001" +
    "\002\000\024\015\076\037\071\052\104\066\072\067\101" +
    "\070\075\071\074\072\100\073\103\001\002\000\004\007" +
    "\142\001\002\000\044\007\uffa9\010\uffa9\016\uffa9\027\uffa9" +
    "\034\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\001\002\000\044\007\uffad\010\uffad\016\uffad\027\uffad\034" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\001" +
    "\002\000\044\007\uffaf\010\uffaf\016\uffaf\027\uffaf\034\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\001\002" +
    "\000\046\007\uffab\010\uffab\015\136\016\uffab\027\uffab\034" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\001" +
    "\002\000\024\015\076\037\071\052\104\066\072\067\101" +
    "\070\075\071\074\072\100\073\103\001\002\000\044\007" +
    "\uff9a\010\uff9a\016\uff9a\027\uff9a\034\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\001\002\000\024\015\076" +
    "\037\071\052\104\066\072\067\101\070\075\071\074\072" +
    "\100\073\103\001\002\000\024\015\076\037\071\052\104" +
    "\066\072\067\101\070\075\071\074\072\100\073\103\001" +
    "\002\000\024\015\076\037\071\052\104\066\072\067\101" +
    "\070\075\071\074\072\100\073\103\001\002\000\024\015" +
    "\076\037\071\052\104\066\072\067\101\070\075\071\074" +
    "\072\100\073\103\001\002\000\024\015\076\037\071\052" +
    "\104\066\072\067\101\070\075\071\074\072\100\073\103" +
    "\001\002\000\024\015\076\037\071\052\104\066\072\067" +
    "\101\070\075\071\074\072\100\073\103\001\002\000\024" +
    "\015\076\037\071\052\104\066\072\067\101\070\075\071" +
    "\074\072\100\073\103\001\002\000\024\015\076\037\071" +
    "\052\104\066\072\067\101\070\075\071\074\072\100\073" +
    "\103\001\002\000\024\015\076\037\071\052\104\066\072" +
    "\067\101\070\075\071\074\072\100\073\103\001\002\000" +
    "\024\015\076\037\071\052\104\066\072\067\101\070\075" +
    "\071\074\072\100\073\103\001\002\000\024\015\076\037" +
    "\071\052\104\066\072\067\101\070\075\071\074\072\100" +
    "\073\103\001\002\000\024\015\076\037\071\052\104\066" +
    "\072\067\101\070\075\071\074\072\100\073\103\001\002" +
    "\000\044\007\uffa3\010\uffa3\016\uffa3\027\uffa3\034\uffa3\036" +
    "\111\037\106\040\116\041\114\042\112\043\117\044\120" +
    "\045\113\046\115\047\110\050\107\051\uffa3\001\002\000" +
    "\044\007\uffa0\010\uffa0\016\uffa0\027\uffa0\034\uffa0\036\111" +
    "\037\106\040\116\041\114\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\001\002\000\044" +
    "\007\uff9d\010\uff9d\016\uff9d\027\uff9d\034\uff9d\036\111\037" +
    "\106\040\116\041\114\042\uff9d\043\uff9d\044\120\045\113" +
    "\046\115\047\110\050\uff9d\051\uff9d\001\002\000\044\007" +
    "\uffa6\010\uffa6\016\uffa6\027\uffa6\034\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\001\002\000\044\007\uffa2" +
    "\010\uffa2\016\uffa2\027\uffa2\034\uffa2\036\111\037\106\040" +
    "\116\041\114\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\001\002\000\044\007\uffa5\010" +
    "\uffa5\016\uffa5\027\uffa5\034\uffa5\036\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\001\002\000\044\007\uff9f\010\uff9f" +
    "\016\uff9f\027\uff9f\034\uff9f\036\111\037\106\040\116\041" +
    "\114\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\050\uff9f\051\uff9f\001\002\000\044\007\uff9e\010\uff9e\016" +
    "\uff9e\027\uff9e\034\uff9e\036\111\037\106\040\116\041\114" +
    "\042\uff9e\043\uff9e\044\120\045\113\046\115\047\110\050" +
    "\uff9e\051\uff9e\001\002\000\044\007\uffa8\010\uffa8\016\uffa8" +
    "\027\uffa8\034\uffa8\036\uffa8\037\uffa8\040\116\041\114\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\001\002\000\044\007\uffa1\010\uffa1\016\uffa1\027" +
    "\uffa1\034\uffa1\036\111\037\106\040\116\041\114\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\001\002\000\044\007\uffa4\010\uffa4\016\uffa4\027\uffa4" +
    "\034\uffa4\036\111\037\106\040\116\041\114\042\112\043" +
    "\117\044\120\045\113\046\115\047\110\050\uffa4\051\uffa4" +
    "\001\002\000\044\007\uffa7\010\uffa7\016\uffa7\027\uffa7\034" +
    "\uffa7\036\uffa7\037\uffa7\040\116\041\114\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\001" +
    "\002\000\026\015\076\016\140\037\071\052\104\066\072" +
    "\067\101\070\075\071\074\072\100\073\103\001\002\000" +
    "\004\016\141\001\002\000\044\007\uffc4\010\uffc4\016\uffc4" +
    "\027\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\001\002\000\044\007\uffc5\010\uffc5\016\uffc5\027" +
    "\uffc5\034\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\001\002\000\042\004\uffd3\011\uffd3\014\uffd3\020\uffd3" +
    "\022\uffd3\023\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\035\uffd3\063\uffd3\064\uffd3\073\uffd3\001\002" +
    "\000\034\016\144\036\111\037\106\040\116\041\114\042" +
    "\112\043\117\044\120\045\113\046\115\047\110\050\107" +
    "\051\121\001\002\000\044\007\uff9c\010\uff9c\016\uff9c\027" +
    "\uff9c\034\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051" +
    "\uff9c\001\002\000\024\015\076\037\071\052\104\066\072" +
    "\067\101\070\075\071\074\072\100\073\103\001\002\000" +
    "\006\007\uffb1\016\uffb1\001\002\000\044\007\uff9b\010\uff9b" +
    "\016\uff9b\027\uff9b\034\uff9b\036\uff9b\037\uff9b\040\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b" +
    "\050\uff9b\051\uff9b\001\002\000\012\007\uffb6\024\uffb6\036" +
    "\uffb6\070\uffb6\001\002\000\012\007\uffb8\024\152\036\161" +
    "\070\150\001\002\000\004\015\155\001\002\000\004\007" +
    "\154\001\002\000\042\004\uffcf\011\uffcf\014\uffcf\020\uffcf" +
    "\022\uffcf\023\uffcf\025\uffcf\026\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\035\uffcf\063\uffcf\064\uffcf\073\uffcf\001\002" +
    "\000\024\015\076\037\071\052\104\066\072\067\101\070" +
    "\075\071\074\072\100\073\103\001\002\000\034\016\157" +
    "\036\111\037\106\040\116\041\114\042\112\043\117\044" +
    "\120\045\113\046\115\047\110\050\107\051\121\001\002" +
    "\000\010\007\uffb8\024\152\070\150\001\002\000\004\007" +
    "\uffb9\001\002\000\004\070\150\001\002\000\004\007\uffba" +
    "\001\002\000\012\007\uffb7\024\uffb7\036\uffb7\070\uffb7\001" +
    "\002\000\042\004\uffcd\011\uffcd\014\uffcd\020\uffcd\022\uffcd" +
    "\023\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\035\uffcd\063\uffcd\064\uffcd\073\uffcd\001\002\000\016" +
    "\014\uffd6\020\uffd6\030\uffd6\031\uffd6\032\uffd6\035\uffd6\001" +
    "\002\000\004\007\167\001\002\000\004\057\170\001\002" +
    "\000\006\060\172\061\uffc8\001\002\000\004\061\205\001" +
    "\002\000\004\015\173\001\002\000\024\015\076\037\071" +
    "\052\104\066\072\067\101\070\075\071\074\072\100\073" +
    "\103\001\002\000\034\016\175\036\111\037\106\040\116" +
    "\041\114\042\112\043\117\044\120\045\113\046\115\047" +
    "\110\050\107\051\121\001\002\000\004\062\176\001\002" +
    "\000\004\065\177\001\002\000\024\011\053\022\056\023" +
    "\066\025\050\026\054\033\052\063\063\064\uffc6\073\057" +
    "\001\002\000\004\064\203\001\002\000\024\011\053\022" +
    "\056\023\066\025\050\026\054\033\052\063\063\064\uffc6" +
    "\073\057\001\002\000\004\064\uffc7\001\002\000\006\060" +
    "\172\061\uffc8\001\002\000\004\061\uffc9\001\002\000\004" +
    "\065\206\001\002\000\024\011\053\022\056\023\066\025" +
    "\050\026\054\033\052\063\063\064\uffc6\073\057\001\002" +
    "\000\004\064\210\001\002\000\004\007\uffca\001\002\000" +
    "\012\002\uffdd\004\uffdd\012\uffdd\017\uffdd\001\002\000\042" +
    "\004\uffcc\011\uffcc\014\uffcc\020\uffcc\022\uffcc\023\uffcc\025" +
    "\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc" +
    "\063\uffcc\064\uffcc\073\uffcc\001\002\000\042\004\uffcb\011" +
    "\uffcb\014\uffcb\020\uffcb\022\uffcb\023\uffcb\025\uffcb\026\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\063\uffcb\064" +
    "\uffcb\073\uffcb\001\002\000\004\073\230\001\002\000\030" +
    "\015\076\016\221\037\071\052\104\054\220\066\072\067" +
    "\101\070\075\071\074\072\100\073\103\001\002\000\004" +
    "\016\227\001\002\000\036\010\225\016\uffb3\036\111\037" +
    "\106\040\116\041\114\042\112\043\117\044\120\045\113" +
    "\046\115\047\110\050\107\051\121\001\002\000\004\073" +
    "\222\001\002\000\004\007\uffc2\001\002\000\006\010\223" +
    "\016\uffb2\001\002\000\026\015\076\037\071\052\104\054" +
    "\220\066\072\067\101\070\075\071\074\072\100\073\103" +
    "\001\002\000\004\016\uffb4\001\002\000\026\015\076\037" +
    "\071\052\104\054\220\066\072\067\101\070\075\071\074" +
    "\072\100\073\103\001\002\000\004\016\uffb5\001\002\000" +
    "\004\007\uffc3\001\002\000\010\005\ufff0\006\ufff0\010\214" +
    "\001\002\000\006\005\ufff1\006\ufff1\001\002\000\004\007" +
    "\233\001\002\000\042\004\uffd0\011\uffd0\014\uffd0\020\uffd0" +
    "\022\uffd0\023\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\035\uffd0\063\uffd0\064\uffd0\073\uffd0\001\002" +
    "\000\042\004\uffd2\011\uffd2\014\uffd2\020\uffd2\022\uffd2\023" +
    "\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\035\uffd2\063\uffd2\064\uffd2\073\uffd2\001\002\000\034\027" +
    "\236\036\111\037\106\040\116\041\114\042\112\043\117" +
    "\044\120\045\113\046\115\047\110\050\107\051\121\001" +
    "\002\000\032\004\005\011\053\022\056\023\066\025\050" +
    "\026\054\030\uffd4\031\uffd4\032\uffd4\033\052\063\063\073" +
    "\057\001\002\000\010\030\uffbf\031\uffbf\032\241\001\002" +
    "\000\006\030\247\031\uffbc\001\002\000\024\015\076\037" +
    "\071\052\104\066\072\067\101\070\075\071\074\072\100" +
    "\073\103\001\002\000\010\030\uffbf\031\uffbf\032\241\001" +
    "\002\000\006\030\uffc0\031\uffc0\001\002\000\034\027\245" +
    "\036\111\037\106\040\116\041\114\042\112\043\117\044" +
    "\120\045\113\046\115\047\110\050\107\051\121\001\002" +
    "\000\032\004\005\011\053\022\056\023\066\025\050\026" +
    "\054\030\uffd4\031\uffd4\032\uffd4\033\052\063\063\073\057" +
    "\001\002\000\010\030\uffbe\031\uffbe\032\uffbe\001\002\000" +
    "\026\004\005\011\053\022\056\023\066\025\050\026\054" +
    "\031\uffd4\033\052\063\063\073\057\001\002\000\004\031" +
    "\251\001\002\000\004\007\uffc1\001\002\000\004\031\uffbd" +
    "\001\002\000\004\007\254\001\002\000\042\004\uffd1\011" +
    "\uffd1\014\uffd1\020\uffd1\022\uffd1\023\uffd1\025\uffd1\026\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\063\uffd1\064" +
    "\uffd1\073\uffd1\001\002\000\034\034\256\036\111\037\106" +
    "\040\116\041\114\042\112\043\117\044\120\045\113\046" +
    "\115\047\110\050\107\051\121\001\002\000\026\004\005" +
    "\011\053\022\056\023\066\025\050\026\054\033\052\035" +
    "\uffd4\063\063\073\057\001\002\000\004\035\260\001\002" +
    "\000\004\007\uffbb\001\002\000\016\014\uffd5\020\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\035\uffd5\001\002\000\004\007\263" +
    "\001\002\000\042\004\uffce\011\uffce\014\uffce\020\uffce\022" +
    "\uffce\023\uffce\025\uffce\026\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\035\uffce\063\uffce\064\uffce\073\uffce\001\002\000" +
    "\004\005\uffd7\001\002\000\004\015\266\001\002\000\006" +
    "\016\uffe2\073\267\001\002\000\004\005\302\001\002\000" +
    "\004\016\271\001\002\000\004\013\272\001\002\000\012" +
    "\074\036\075\033\076\035\077\037\001\002\000\006\005" +
    "\uffde\010\300\001\002\000\004\005\275\001\002\000\026" +
    "\004\005\011\053\014\uffd4\022\056\023\066\025\050\026" +
    "\054\033\052\063\063\073\057\001\002\000\004\014\277" +
    "\001\002\000\012\002\uffe4\004\uffe4\012\uffe4\017\uffe4\001" +
    "\002\000\012\074\036\075\033\076\035\077\037\001\002" +
    "\000\004\005\uffdf\001\002\000\012\074\036\075\033\076" +
    "\035\077\037\001\002\000\006\010\304\016\uffe0\001\002" +
    "\000\004\073\306\001\002\000\004\016\uffe3\001\002\000" +
    "\004\005\307\001\002\000\012\074\036\075\033\076\035" +
    "\077\037\001\002\000\006\010\304\016\uffe0\001\002\000" +
    "\004\016\uffe1\001\002\000\004\017\uffff\001\002\000\050" +
    "\002\ufff8\004\ufff8\007\ufff8\011\ufff8\012\ufff8\014\ufff8\017" +
    "\ufff8\020\ufff8\022\ufff8\023\ufff8\025\ufff8\026\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\035\ufff8\063\ufff8\073\ufff8\001" +
    "\002\000\004\017\ufffe\001\002\000\006\005\317\006\320" +
    "\001\002\000\050\002\ufff6\004\ufff6\007\ufff6\011\ufff6\012" +
    "\ufff6\014\ufff6\017\ufff6\020\ufff6\022\ufff6\023\ufff6\025\ufff6" +
    "\026\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\035\ufff6\063" +
    "\ufff6\073\ufff6\001\002\000\012\074\036\075\033\076\035" +
    "\077\037\001\002\000\014\066\327\067\322\070\321\071" +
    "\324\072\325\001\002\000\006\007\uffeb\010\uffeb\001\002" +
    "\000\006\007\uffec\010\uffec\001\002\000\004\007\332\001" +
    "\002\000\006\007\uffea\010\uffea\001\002\000\006\007\uffe9" +
    "\010\uffe9\001\002\000\006\007\uffee\010\330\001\002\000" +
    "\006\007\uffed\010\uffed\001\002\000\014\066\327\067\322" +
    "\070\321\071\324\072\325\001\002\000\004\007\uffef\001" +
    "\002\000\006\053\334\073\230\001\002\000\050\002\ufff4" +
    "\004\ufff4\007\ufff4\011\ufff4\012\ufff4\014\ufff4\017\ufff4\020" +
    "\ufff4\022\ufff4\023\ufff4\025\ufff4\026\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\035\ufff4\063\ufff4\073\ufff4\001\002\000" +
    "\050\002\ufff2\004\ufff2\007\ufff2\011\ufff2\012\ufff2\014\ufff2" +
    "\017\ufff2\020\ufff2\022\ufff2\023\ufff2\025\ufff2\026\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\035\ufff2\063\ufff2\073\ufff2" +
    "\001\002\000\004\007\336\001\002\000\006\053\340\073" +
    "\230\001\002\000\050\002\ufff5\004\ufff5\007\ufff5\011\ufff5" +
    "\012\ufff5\014\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\025" +
    "\ufff5\026\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\035\ufff5" +
    "\063\ufff5\073\ufff5\001\002\000\050\002\ufff3\004\ufff3\007" +
    "\ufff3\011\ufff3\012\ufff3\014\ufff3\017\ufff3\020\ufff3\022\ufff3" +
    "\023\ufff3\025\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\035\ufff3\063\ufff3\073\ufff3\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\014\002\003\004\011\036\005\040\006\041" +
    "\007\001\001\000\002\001\001\000\006\015\314\037\315" +
    "\001\001\000\012\004\313\036\005\040\006\041\007\001" +
    "\001\000\006\040\006\041\312\001\001\000\012\004\311" +
    "\036\005\040\006\041\007\001\001\000\002\001\001\000" +
    "\004\005\013\001\001\000\002\001\001\000\014\003\017" +
    "\005\016\036\014\040\006\041\015\001\001\000\014\003" +
    "\022\005\016\036\014\040\006\041\015\001\001\000\014" +
    "\003\021\005\016\036\014\040\006\041\015\001\001\000" +
    "\014\003\020\005\016\036\014\040\006\041\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\030\032\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\033\001\001\000\002" +
    "\001\001\000\004\033\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\043\001" +
    "\001\000\004\033\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\061\015\066\022\064\024\060\027" +
    "\050\030\054\040\006\041\063\042\057\001\001\000\006" +
    "\011\261\012\150\001\001\000\024\007\260\015\066\022" +
    "\064\024\060\027\050\030\054\040\006\041\063\042\057" +
    "\001\001\000\006\006\101\010\254\001\001\000\010\006" +
    "\101\010\072\013\252\001\001\000\006\006\101\010\234" +
    "\001\001\000\002\001\001\000\006\011\231\012\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\006\041\165\001\001\000" +
    "\024\007\164\015\066\022\064\024\060\027\050\030\054" +
    "\040\006\041\063\042\057\001\001\000\002\001\001\000" +
    "\006\011\152\012\150\001\001\000\002\001\001\000\010" +
    "\006\101\010\072\013\076\001\001\000\006\006\101\010" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\101\010\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\101\010" +
    "\104\001\001\000\002\001\001\000\006\006\101\010\134" +
    "\001\001\000\006\006\101\010\133\001\001\000\006\006" +
    "\101\010\132\001\001\000\006\006\101\010\131\001\001" +
    "\000\006\006\101\010\130\001\001\000\006\006\101\010" +
    "\127\001\001\000\006\006\101\010\126\001\001\000\006" +
    "\006\101\010\125\001\001\000\006\006\101\010\124\001" +
    "\001\000\006\006\101\010\123\001\001\000\006\006\101" +
    "\010\122\001\001\000\006\006\101\010\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\101\010" +
    "\072\013\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\101\010\072\013\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\161\012\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\101\010\155\001" +
    "\001\000\002\001\001\000\006\011\157\012\150\001\001" +
    "\000\002\001\001\000\004\012\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\101" +
    "\010\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\066\022\064\024\060\027\200" +
    "\030\054\042\057\044\177\001\001\000\002\001\001\000" +
    "\020\015\066\022\064\024\060\027\200\030\054\042\057" +
    "\044\201\001\001\000\002\001\001\000\004\043\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\066" +
    "\022\064\024\060\027\200\030\054\042\057\044\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\230\001" +
    "\001\000\010\006\101\010\216\014\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\101\010\216\014\223" +
    "\001\001\000\002\001\001\000\010\006\101\010\216\014" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\236" +
    "\015\066\022\064\024\060\027\050\030\054\040\006\041" +
    "\063\042\057\001\001\000\006\025\241\026\237\001\001" +
    "\000\004\023\247\001\001\000\006\006\101\010\243\001" +
    "\001\000\006\025\241\026\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\245\015\066\022\064\024" +
    "\060\027\050\030\054\040\006\041\063\042\057\001\001" +
    "\000\002\001\001\000\024\007\251\015\066\022\064\024" +
    "\060\027\050\030\054\040\006\041\063\042\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\256\015\066\022\064\024\060\027\050\030\054\040" +
    "\006\041\063\042\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\272\021\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\275\015\066\022\064\024" +
    "\060\027\050\030\054\040\006\041\063\042\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\272\021" +
    "\300\001\001\000\002\001\001\000\004\020\302\001\001" +
    "\000\004\035\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\307\001\001\000\004" +
    "\035\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\334\001\001\000\006\016\325\017" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\325\017\330\001\001" +
    "\000\002\001\001\000\006\015\314\037\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\314\037\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= IterNoProcedure Procedure Iter 
            {
              ProgramOp RESULT =null;
		int program1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int program1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProgramOp program1 = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcOp procedure = (ProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int program2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int program2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProgramOp program2 = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<VarDeclOp> varDeclList = new ArrayList<>();
                                                                        varDeclList.addAll(program1.getVarDeclOpList());
                                                                        varDeclList.addAll(program2.getVarDeclOpList());
                                                                        ArrayList<ProcOp> procList = new ArrayList<ProcOp>();
                                                                        procList.add(procedure);
                                                                        procList.addAll(program2.getProcOpList());
                                                                        ArrayList<FunOp> funList = program1.getFunOpList();
                                                                        funList.addAll(program2.getFunOpList());
                                                                        RESULT = new ProgramOp(varDeclList, procList, funList);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IterNoProcedure ::= VarDecls IterNoProcedure 
            {
              ProgramOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProgramOp program = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		varDeclList.addAll(program.getVarDeclOpList());
                                                                program.setVarDeclOpList(varDeclList);
                                                                RESULT = program;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterNoProcedure",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IterNoProcedure ::= Function IterNoProcedure 
            {
              ProgramOp RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunOp function = (FunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProgramOp program = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<FunOp> funList = new ArrayList<>();
                                                   funList.add(function);
                                                   funList.addAll(program.getFunOpList());
                                                   program.setFunOpList(funList);
                                                   RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterNoProcedure",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IterNoProcedure ::= 
            {
              ProgramOp RESULT =null;
		 RESULT = new ProgramOp(new ArrayList<VarDeclOp>(), new ArrayList<ProcOp>(), new ArrayList<FunOp>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterNoProcedure",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter ::= VarDecls Iter 
            {
              ProgramOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProgramOp program = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varDeclList.addAll(program.getVarDeclOpList());
                                           program.setVarDeclOpList(varDeclList);
                                           RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Iter ::= Function Iter 
            {
              ProgramOp RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunOp function = (FunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProgramOp program = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<FunOp> funList = new ArrayList<>();
                                       funList.add(function);
                                       funList.addAll(program.getFunOpList());
                                       program.setFunOpList(funList);
                                       RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Iter ::= Procedure Iter 
            {
              ProgramOp RESULT =null;
		int procedureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procedureright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcOp procedure = (ProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProgramOp program = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ProcOp> procList = new ArrayList<>();
                                  procList.add(procedure);
                                  procList.addAll(program.getProcOpList());
                                  program.setProcOpList(procList);
                                  RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Iter ::= 
            {
              ProgramOp RESULT =null;
		 RESULT = new ProgramOp(new ArrayList<VarDeclOp>(), new ArrayList<ProcOp>(), new ArrayList<FunOp>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecls ::= VarDecl VarDecls 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varDeclList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclList1 = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> varDeclList2 = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<VarDeclOp>();
                                                     RESULT.addAll(varDeclList1);
                                                     RESULT.addAll(varDeclList2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecls ::= VarDecl 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = varDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= VAR Decls 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> decl = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decls ::= Ids COLON Type SEMI Decls 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ID> idList = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> declList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<VarDeclOp>();
                                                        RESULT.add(new VarDeclOp(idList, type));
                                                        RESULT.addAll(declList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ID> idList = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Const> constList = (ArrayList<Const>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> declList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayList<VarDeclOp>();
                                                                 RESULT.add(new VarDeclOp(idList, constList));
                                                                 RESULT.addAll(declList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ID> idList = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayList<VarDeclOp>();
	                                            RESULT.add(new VarDeclOp(idList, type)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ID> idList = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Const> constList = (ArrayList<Const>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayList<VarDeclOp>();
                                                        RESULT.add(new VarDeclOp(idList, constList)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Ids ::= ID COMMA Ids 
            {
              ArrayList<ID> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ID> idList = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new ArrayList<ID>();
                         RESULT.add(new ID(value));
                         RESULT.addAll(idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Ids ::= ID 
            {
              ArrayList<ID> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ID>();
             RESULT.add(new ID(value)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Consts ::= Const COMMA Consts 
            {
              ArrayList<Const> RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Const const1 = (Const)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Const> constList = (ArrayList<Const>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new ArrayList<Const>();
                                                RESULT.add(const1);
                                                RESULT.addAll(constList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Consts ::= Const 
            {
              ArrayList<Const> RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Const const1 = (Const)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Const>();
                    RESULT.add(const1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  Const("Real", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= INTEGER_CONST 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("Integer", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= STRING_CONST 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("String", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= TRUE 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("Boolean", "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= FALSE 
            {
              Const RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("Boolean", "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= REAL 
            {
              Type RESULT =null;
		 RESULT = new Type("Real");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = new Type("Integer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new Type("String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new Type("Boolean");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              FunOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int funcParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int funcParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<ProcFunParamOp> funcParamList = (ArrayList<ProcFunParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int typeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Type> typeList = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunOp(new ID(value), funcParamList, typeList, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FuncParams ::= ID COLON Type OtherFuncParams 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcFunParamOp> funcParamList = (ArrayList<ProcFunParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  ArrayList<ProcFunParamOp>();
                                                                         RESULT.add(new ProcFunParamOp(new Mode("in"), new ID(value), type));
                                                                         RESULT.addAll(funcParamList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FuncParams ::= 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		 RESULT = new ArrayList<ProcFunParamOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OtherFuncParams ::= COMMA ID COLON Type OtherFuncParams 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcFunParamOp> funcParamList = (ArrayList<ProcFunParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  ArrayList<ProcFunParamOp>();
                                                                                    RESULT.add(new ProcFunParamOp(new Mode("in"), new ID(value), type));
                                                                                    RESULT.addAll(funcParamList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OtherFuncParams ::= 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		 RESULT = new ArrayList<ProcFunParamOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Types ::= Type COMMA Types 
            {
              ArrayList<Type> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Type> typeList = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Type>();
                                            RESULT.add(type);
                                            RESULT.addAll(typeList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Types ::= Type 
            {
              ArrayList<Type> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Type>();
                    RESULT.add(type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              ProcOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int procParamListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int procParamListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ProcFunParamOp> procParamList = (ArrayList<ProcFunParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcOp(new ID(value), procParamList, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ProcParams ::= ProcParamId COLON Type OtherProcParams 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		int procParamIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int procParamIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ID procParamId = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procParamIdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procParamIdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcFunParamOp> procParamIdList = (ArrayList<ProcFunParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  ArrayList<ProcFunParamOp>();
                                                                                          RESULT.add(new ProcFunParamOp(procParamId.getMode(), procParamId, type));
                                                                                          RESULT.addAll(procParamIdList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ProcParams ::= 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		 RESULT = new ArrayList<ProcFunParamOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OtherProcParams ::= COMMA ProcParamId COLON Type OtherProcParams 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		int procParamIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int procParamIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ID procParamId = (ID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procParamIdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procParamIdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcFunParamOp> procParamIdList = (ArrayList<ProcFunParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  ArrayList<ProcFunParamOp>();
                                                                                                    RESULT.add(new ProcFunParamOp(procParamId.getMode(), procParamId, type));
                                                                                                    RESULT.addAll(procParamIdList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OtherProcParams ::= 
            {
              ArrayList<ProcFunParamOp> RESULT =null;
		 RESULT = new ArrayList<ProcFunParamOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ProcParamId ::= ID 
            {
              ID RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(value, new Mode("inout")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ProcParamId ::= OUT ID 
            {
              ID RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(value, new Mode("out")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= VarDecls Body 
            {
              BodyOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<VarDeclOp> varDeclListNew = new ArrayList<>();
                                            varDeclListNew.addAll(varDeclList);
                                            varDeclListNew.addAll(body.getVarDeclOpList());
                                            RESULT = new BodyOp(varDeclListNew, body.getStatList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Body ::= Stat Body 
            {
              BodyOp RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Stat> statList = new ArrayList<>();
                              statList.add(stat);
                              statList.addAll(body.getStatList());
                              RESULT = new BodyOp(body.getVarDeclOpList(), statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Body ::= 
            {
              BodyOp RESULT =null;
		 RESULT = new BodyOp(new ArrayList<VarDeclOp>(), new ArrayList<Stat>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              Stat RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<ID> idList = (ArrayList<ID>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignOp(idList, exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= ProcCall SEMI 
            {
              Stat RESULT =null;
		int procCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcCallOp procCall = (ProcCallOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = procCall; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN Exprs SEMI 
            {
              Stat RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnOp(exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= WRITE IOArgs SEMI 
            {
              Stat RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteOp(new Mode("write"), exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= WRITERETURN IOArgs SEMI 
            {
              Stat RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteOp(new Mode("writeReturn"), exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= READ IOArgs SEMI 
            {
              Stat RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadOp(exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stat ::= IfStat SEMI 
            {
              Stat RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStatOp ifStat = (IfStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ifStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stat ::= WhileStat SEMI 
            {
              Stat RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileOp whileStat = (WhileOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = whileStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stat ::= LetStat SEMI 
            {
              Stat RESULT =null;
		int letStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int letStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LetStat letStat = (LetStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = letStat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LetStat ::= LET VarDecls SEMI GO GoWhens OTHERWISE LCPAR Stats RCPAR 
            {
              LetStat RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<VarDeclOp> declList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int goWhenListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int goWhenListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<GoWhenOp> goWhenList = (ArrayList<GoWhenOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LetStat(declList, goWhenList, statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LetStat",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // GoWhens ::= WHEN LPAR Expr RPAR LOOP LCPAR Stats RCPAR GoWhens 
            {
              ArrayList<GoWhenOp> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int goWhenListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int goWhenListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<GoWhenOp> goWhenList = (ArrayList<GoWhenOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<GoWhenOp>();
                                                                                RESULT.add(new GoWhenOp(expr, statList));
                                                                                RESULT.addAll(goWhenList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GoWhens",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // GoWhens ::= 
            {
              ArrayList<GoWhenOp> RESULT =null;
		RESULT = new ArrayList<GoWhenOp>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GoWhens",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stats ::= Stat Stats 
            {
              ArrayList<Stat> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Stat>();
                                    RESULT.add(stat);
                                    RESULT.addAll(statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stats",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stats ::= 
            {
              ArrayList<Stat> RESULT =null;
		RESULT = new ArrayList<Stat>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stats",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FunCall ::= ID LPAR Exprs RPAR 
            {
              CallFunOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallFunOp(new ID(value), exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FunCall ::= ID LPAR RPAR 
            {
              CallFunOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallFunOp(new ID(value), new ArrayList<Expr>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              ProcCallOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcCallOp(new ID(value), exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ProcCall ::= ID LPAR RPAR 
            {
              ProcCallOp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcCallOp(new ID(value), new ArrayList<Expr>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              IfStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BodyOp body1 = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elifListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ElifOp> elifList = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body2 = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStatOp(expr, body1, elifList, body2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Elifs ::= Elif Elifs 
            {
              ArrayList<ElifOp> RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElifOp elif = (ElifOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elifListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ElifOp> elifList = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ElifOp>();
                                      RESULT.add(elif);
                                      RESULT.addAll(elifList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Elifs ::= 
            {
              ArrayList<ElifOp> RESULT =null;
		 RESULT = new ArrayList<ElifOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Elif ::= ELIF Expr THEN Body 
            {
              ElifOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElifOp(expr, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = body; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Else ::= 
            {
              BodyOp RESULT =null;
		 RESULT = new BodyOp(new ArrayList<VarDeclOp>(), new ArrayList<Stat>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              WhileOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileOp(expr, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IOArgs ::= OtherIOArgs IOArgs 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList2 = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                                                    RESULT.add(expr);
                                                    RESULT.addAll(exprList2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IOArgs ::= DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                                                            expr.setModeExpr(new Mode("DOLLAR"));
                                                            RESULT.add(expr);
                                                            RESULT.addAll(exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IOArgs ::= 
            {
              ArrayList<Expr> RESULT =null;
		 RESULT = new ArrayList<Expr>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OtherIOArgs ::= OtherIOArgs PLUS OtherIOArgs 
            {
              Expr RESULT =null;
		int exprList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr exprList1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr exprList2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Op("AddOp", exprList1, exprList2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherIOArgs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OtherIOArgs ::= STRING_CONST 
            {
              Expr RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("String", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherIOArgs",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                                                    RESULT.add(expr);
                                                    RESULT.addAll(exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              ArrayList<Expr> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                                              RESULT.add(new ID(value, new Mode("out")));
                                                RESULT.addAll(exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ProcExprs ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                   RESULT.add(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ProcExprs ::= REF ID 
            {
              ArrayList<Expr> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                      RESULT.add(new ID(value, new Mode("out"))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                                            RESULT.add(expr);
                                            RESULT.addAll(exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exprs ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>();
                    RESULT.add(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFunOp funCall = (CallFunOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funCall; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("Real", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("Integer", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Const("String", value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= ID 
            {
              Expr RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new Const("Boolean", "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new Const("Boolean", "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("AddOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("DiffOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("MulOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("DivOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("AndOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("OrOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("GtOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("GeOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("LtOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("LeOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("EqOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Op("NeOp", expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = expr;
	                            RESULT.setName(RESULT.getName());
	                            RESULT.setModeExpr(new Mode("PAR"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UOp("UMinusOP", expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UOp("NotOp", expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
